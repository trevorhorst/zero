#ifndef ENC28J60_H
#define ENC28J60_H

#include <stdint.h>

#include "hardware/spi.h"
#include "hardware/gpio.h"

// Bank 0 Registers
#define ERDPTL     _u(0x00)
#define ERDPTH     _u(0x01)
#define EWRPTL     _u(0x02)
#define EWRPTH     _u(0x03)
#define ETXSTL     _u(0x04)
#define ETXSTH     _u(0x05)
#define ETXNDL     _u(0x06)
#define ETXNDH     _u(0x07)
#define ERXSTL     _u(0x08)
#define ERXSTH     _u(0x09)
#define ERXNDL     _u(0x0A)
#define ERXNDH     _u(0x0B)
#define ERXRDPTL   _u(0x0C)
#define ERXRDPTH   _u(0x0D)
#define ERXWRPTL   _u(0x0E)
#define ERXWRPTH   _u(0x0F)
#define EDMASTL    _u(0x10)
#define EDMASTH    _u(0x11)
#define EDMANDL    _u(0x12)
#define EDMANDH    _u(0x13)
#define EDMADSTL   _u(0x14)
#define EDMADSTH   _u(0x15)
#define EDMACSL    _u(0x16)
#define EDMACSH    _u(0x17)
// #define —          _u(0x18)
// #define —          _u(0x19)
#define Reserved   _u(0x1A)
#define EIE        _u(0x1B)
#define EIR        _u(0x1C)
#define ESTAT      _u(0x1D)
#define ECON2      _u(0x1E)
#define ECON1      _u(0x1F)

// Bank 1 Registers
#define EHT0       _u(0x00)
#define EHT1       _u(0x01)
#define EHT2       _u(0x02)
#define EHT3       _u(0x03)
#define EHT4       _u(0x04)
#define EHT5       _u(0x05)
#define EHT6       _u(0x06)
#define EHT7       _u(0x07)
#define EPMM0      _u(0x08)
#define EPMM1      _u(0x09)
#define EPMM2      _u(0x0A)
#define EPMM3      _u(0x0B)
#define EPMM4      _u(0x0C)
#define EPMM5      _u(0x0D)
#define EPMM6      _u(0x0E)
#define EPMM7      _u(0x0F)
#define EPMCSL     _u(0x10)
#define EPMCSH     _u(0x11)
// #define —          _u(0x12)
// #define —          _u(0x13)
#define EPMOL      _u(0x14)
#define EPMOH      _u(0x15)
// #define Reserved   _u(0x16)
// #define Reserved   _u(0x17)
#define ERXFCON    _u(0x18)
#define EPKTCNT    _u(0x19)
// #define Reserved   _u(0x1A)
#define EIE        _u(0x1B)
#define EIR        _u(0x1C)
#define ESTAT      _u(0x1D)
#define ECON2      _u(0x1E)
#define ECON1      _u(0x1F)

// Bank 2 Registers
#define MACON1    _u(0x00)
// #define Reserved  _u(0x01)
#define MACON3    _u(0x02)
#define MACON4    _u(0x03)
#define MABBIPG   _u(0x04)
// #define —         _u(0x05)
#define MAIPGL    _u(0x06)
#define MAIPGH    _u(0x07)
#define MACLCON1  _u(0x08)
#define MACLCON2  _u(0x09)
#define MAMXFLL   _u(0x0A)
#define MAMXFLH   _u(0x0B)
// #define Reserved  _u(0x0C)
// #define Reserved  _u(0x0D)
// #define Reserved  _u(0x0E)
// #define —         _u(0x0F)
// #define Reserved  _u(0x10)
// #define Reserved  _u(0x11)
#define MICMD     _u(0x12)
// #define —         _u(0x13)
#define MIREGADR  _u(0x14)
// #define Reserved  _u(0x15)
#define MIWRL     _u(0x16)
#define MIWRH     _u(0x17)
#define MIRDL     _u(0x18)
#define MIRDH     _u(0x19)
// #define Reserved  _u(0x1A)
#define EIE       _u(0x1B)
#define EIR       _u(0x1C)
#define ESTAT     _u(0x1D)
#define ECON2     _u(0x1E)
#define ECON1     _u(0x1F)

// Bank 3 Registers
#define MAADR5     _u(0x00)
#define MAADR6     _u(0x01)
#define MAADR3     _u(0x02)
#define MAADR4     _u(0x03)
#define MAADR1     _u(0x04)
#define MAADR2     _u(0x05)
#define EBSTSD     _u(0x06)
#define EBSTCON    _u(0x07)
#define EBSTCSL    _u(0x08)
#define EBSTCSH    _u(0x09)
#define MISTAT     _u(0x0A)
// #define —          _u(0x0B)
// #define —          _u(0x0C)
// #define —          _u(0x0D)
// #define —          _u(0x0E)
// #define —          _u(0x0F)
// #define —          _u(0x10)
// #define —          _u(0x11)
#define EREVID     _u(0x12)
// #define —          _u(0x13)
// #define —          _u(0x14)
#define ECOCON     _u(0x15)
// #define Reserved   _u(0x16)
#define EFLOCON    _u(0x17)
#define EPAUSL     _u(0x18)
#define EPAUSH     _u(0x19)
// #define Reserved   _u(0x1A)
#define EIE        _u(0x1B)
#define EIR        _u(0x1C)
#define ESTAT      _u(0x1D)
#define ECON2      _u(0x1E)
#define ECON1      _u(0x1F)

typedef struct enc28j60_spi_device_t {
    spi_inst_t *bus;
    uint32_t cs;
    uint32_t reset;
} enc28j60_spi_device;

int32_t enc28j60_spi_read(enc28j60_spi_device *device, uint8_t reg, uint8_t *buffer, size_t buffer_length);
int32_t enc28j60_spi_write_control(enc28j60_spi_device *device, uint8_t reg, uint8_t data);
int32_t enc28j60_spi_reset(enc28j60_spi_device *device);

#endif // ENC28J60_H
